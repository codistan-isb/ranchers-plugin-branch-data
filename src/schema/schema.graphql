type Branch {
  _id: ID
  name: String
  address: String
  phoneNumber1: String
  phoneNumber2: String
  phoneNumber3: String
  Latitude: Float
  Longitude: Float
  City: String
  Description: String
  createdAt: String
  updatedAt: String
  Sector: String
  Timing: String
  deliveryArea: String
  taxRate: taxRateOutput
}

type taxRateOutput {
  card: Float
  cash: Float
}
input UpdateBranchDataInput {
  # _id: ID!
  name: String
  address: String
  phoneNumber1: String
  phoneNumber2: String
  phoneNumber3: String
  Latitude: Float
  Longitude: Float
  City: String
  Description: String
  Sector: String
  Timing: String
  deliveryArea: String
  taxRate: taxRateInput
}

input CreateBranchInput {
  name: String!
  address: String!
  phoneNumber1: String
  phoneNumber2: String
  phoneNumber3: String
  Latitude: Float
  Longitude: Float
  City: String
  Description: String
  Sector: String
  Timing: String
  deliveryArea: String
  taxRate: taxRateInput
}
input taxRateInput {
  card: Float
  cash: Float
}

type Mutation {
  createBranch(input: CreateBranchInput!): Branch
  deleteBranch(_id: ID!): Boolean
  updateBranchData(_id: ID!, input: UpdateBranchDataInput): Branch
  # updateAdminAccount(UserRole: String): Boolean
}

type Query {
  branches: [Branch]
  getBranchByName(name: String!): Branch
  getRiderCount(name: String!): Int!
  getBranchByCityName(City: String): [Branch]
}
